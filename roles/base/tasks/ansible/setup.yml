---
- name: ansible setup | ensure ansible latest version
  tags: ansible,ansible-setup
  package:
    name: ansible
    state: latest

- name: ansible setup | install required packages
  tags: ansible,ansible-setup,packages
  package:
    name:
      - "{{ dconf_package }}"
      - "{{ python_psutil_package }}"

- name: ansible setup | install acl package
  tags: ansible,ansible-setup,packages
  package:
    name: acl
  when: ansible_distribution in ["Debian", "Pop!_OS", "Ubuntu"]

# - name: ansible setup | remove default ansible directory (/etc/ansible) from host
#   tags: ansible,ansible-setup
#   file:
#     path: /etc/ansible
#     state: absent

# - name: ansible setup | generate provision script from template
#   tags: ansible,ansible-setup,scripts
#   template:
#     src: provision.sh.j2
#     dest: /usr/local/bin/provision
#     owner: root
#     group: root
#     mode: 0755



# TODO: galaxy pull

- name: ansible setup | add ansible-pull cron job | auto provision
  tags: always,ansible
  cron:
    name: ansible auto-provision
    user: ansible
    hour: "*"
    minute: "0"
    # the -o option makes this cron job run only if there are changes to the repository
    job: ansible-pull -o -U {{ my_ansible_repo }} -e "cron_job_name='auto-provision'" -e "user_login={{ user_login }}" -e "user_login={{ user_login }}" -e "git_user_name={{ git_user_name }}" -e "git_user_email={{ git_user_email }}" -e "telegram_chat_id={{ telegram_chat_id }}" -e "telegram_token={{ telegram_token }}" -e "healthcheck_uuid={{ healthcheck_uuid }}" 2>> /home/ansible/ansible-pull.error.log >>/home/ansible/ansible-pull.success.log

- name: ansible setup | add ansible-pull cron job | update on boot
  tags: always,ansible
  cron:
    name: ansible update on boot
    user: ansible
    special_time: reboot
    job: sleep 300 && ansible-pull -U {{ my_ansible_repo }} --tags "always" -e "cron_job_name='updates'" -e "user_login={{ user_login }}" -e "user_login={{ user_login }}" -e "git_user_name={{ git_user_name }}" -e "git_user_email={{ git_user_email }}" -e "telegram_chat_id={{ telegram_chat_id }}" -e "telegram_token={{ telegram_token }}" -e "healthcheck_uuid={{ healthcheck_uuid }}" 2>> /home/ansible/ansible-pull.error.log >>/home/ansible/ansible-pull.success.log

# TODO: task to send files
# dconf dump / > /tmp/dconf.dump
# (??? config files)
# send to telegram or to git repo
# make something to check diffs
#   -> temporary | then make something to find out how to put it in ansible
#       -> configs like chrome, stremio, vscode, etc...